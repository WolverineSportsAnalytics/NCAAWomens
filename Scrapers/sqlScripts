import mysql.connector
import requests
from bs4 import BeautifulSoup
from ast import literal_eval
import os
from ast import literal_eval



def main():

    # the results will need to have certain things popped off
    teamVsOtherTeamBoxscore = "SELECT distinct * FROM advancedScheduleStats t1 right JOIN advancedScheduleStats t2 ON t1.teamID = t2.opponentTeamID and t1.dateID = t2.dateID where t1.teamID < 15 and t1.opponentTeamID < 15"

    testFirstModel = "SELECT a.win, from advancedScheduleStats a right join avgAdvancedScheduleStats b on  a.team = b.team and a.seasonID = b.seasonID and a.home = b.home  right join avgAdvancedScheduleStats c on a.opponent = c.team and a.seasonID = c.seasonID where a.teamID < 15 and a.home = 1 and c.home = 0"
    statement = "SELECT a.win, b.offRtg, c.offRtg, b.pace, c.pace, b.ptsPerScoringAttempt, b.ftPercent, b.2PtPercent, b.3PtPercent, b.offRebPercent, b.assistPercent, b.blockPercent, d.simpleRPI, c.ptsPerScoringAttempt, c.ftPercent, c.2PtPercent, c.3PtPercent, c.offRebPercent, c.assistPercent, c.blockPercent, e.simpleRPI from advancedScheduleStats a right join avgAdvancedScheduleStats b on  a.team = b.team and a.seasonID = b.seasonID and a.home = b.home  right join avgAdvancedScheduleStats c on a.opponent = c.team and a.seasonID = c.seasonID right join scheduleStats d ON a.team = d.team and a.dateID = d.dateID right join scheduleStats e on  a.opponent = e.team and a.dateID = e.dateID where a.teamID < 15 and a.home = 1 and c.home = 0"

    statementForTest = select * from advancedScheduleStats a 
left join boxScoreTotalsAverages b on a.team = b.team and a.seasonID = b.seasonID and a.home = b.home
left join boxScoreTotalsAverages c on a.opponent = c.team and a.seasonID = c.seasonID
where b.pointsScored is not null and c.pointsScored is not null and a.home = 0 and c.home = 1

plusMinusData = select * from plusMinusTable a
right join playerAdvancedAverages b on b.player = a.player1 and b.seasonID = a.seasonID
right join playerAdvancedAverages c on c.player = a.player2 and b.seasonID = a.seasonID
right join playerAdvancedAverages d on d.player = a.player3 and b.seasonID = a.seasonID
right join playerAdvancedAverages e on e.player = a.player4 and b.seasonID = a.seasonID
right join playerAdvancedAverages f on f.player = a.player5 and b.seasonID = a.seasonID
right join teamAverages g on g.team = a.opponent


plusMinusIndividual = select *

from playerPlusMinusVsOpponent a
right join playerAdvancedAverages b on a.player = b.player and a.seasonID = b.seasonID 
right join avgAdvancedScheduleStats c on a.opponent = c.team and a.seasonID = c.seasonID
where a.minutes > 5

statement = select * from lineupPlusMinus a
right join playerAdvancedAverages b on a.PGName = b.player and a.seasonID = b.seasonID
right join playerAdvancedAverages c on a.Guard1Name = c.player and a.seasonID = c.seasonID
right join playerAdvancedAverages d on a.Guard2Name = d.player and a.seasonID = d.seasonID
right join playerAdvancedAverages e on a.ForwardName = e.player and a.seasonID = e.seasonID
right join playerAdvancedAverages f on a.CenterName = f.player and a.seasonID = f.seasonID
    
    cnx = mysql.connector.connect(user="wsa",
                                  host="34.68.250.121",
                                  database="NCAAWomens",
                                  password="LeBron>MJ!")
    cursor = cnx.cursor(buffered=True)

    

if __name__=="__main__":
    main()